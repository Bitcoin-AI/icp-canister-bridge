import React, { useState, useEffect, useCallback } from "react";
import { render } from "react-dom";
import bolt11 from 'bolt11';
import { ethers } from 'ethers';
import { main } from "../../declarations/main";
import useWeb3Modal from "./hooks/useWeb3Modal";
import addresses from "../assets/contracts/addresses";
import abis from "../assets/contracts/abis";
import styles from './RSKLightningBridge.module.css';  // Import the CSS module


const RSKLightningBridge = () => {
  // State hooks
  const [message, setMessage] = useState('');
  const [amount, setAmount] = useState('');
  const [r_hash, setPaymentHash] = useState('');
  const [evm_address, setEvmAddr] = useState('');
  const [bridge, setBridge] = useState();

  const {
    netId,
    coinbase,
    provider,
    loadWeb3Modal
  } = useWeb3Modal();

  // Effect hook for initializing the bridge
  useEffect(() => {
    if (netId === 31 && provider) {
      const newBridge = new ethers.Contract(addresses.bridge.testnet, abis.bridge, provider);
      setBridge(newBridge);
    }
  }, [netId, provider]);

  // Other functions (getInvoice, payInvoice, checkInvoice) remain the same...

  const claimRBTC = useCallback(async () => {
    if (provider && bridge) {
      const signer = await provider.getSigner();
      const bridgeWithSigner = bridge.connect(signer);
      const tx = await bridgeWithSigner.claimRBTC();
      setMessage(`RBTC claimed: ${tx.hash}`);
      await tx.wait();
    }
  }, [provider, bridge]);

  // UI Rendering
  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <p>Welcome to RSK Lightning Bridge!</p>
        <p>Follow the steps below to bridge your assets.</p>
      </div>

      <div className={styles.step}>
        <p>Step 1: Input r_hash from the invoice generated by the service after you pay</p>
        <input
          className={styles.input}
          value={r_hash}
          onChange={(ev) => setPaymentHash(ev.target.value)}
          placeholder="Enter r_hash"
        />
        <button className={styles.button} onClick={checkInvoice}>Check Invoice!</button>
      </div>

      <div className={styles.step}>
        <p>Step 2: Generate an invoice for the service to pay</p>
        <label className={styles.label}>Amount</label>
        <input
          className={styles.input}
          value={amount}
          onChange={(ev) => setAmount(ev.target.value)}
          placeholder="Enter amount"
        />
        <label className={styles.label}>EVM Address</label>
        <input
          className={styles.input}
          value={evm_address}
          onChange={(ev) => setEvmAddr(ev.target.value)}
          placeholder="Enter EVM address"
        />
        <button className={styles.button} onClick={payInvoice}>Send Invoice!</button>
      </div>

      <div className={styles.step}>
        <p>Step 3: Request an invoice to swap to RSK</p>
        <label className={styles.label}>Amount</label>
        <input
          className={styles.input}
          value={amount}
          onChange={(ev) => setAmount(ev.target.value)}
          placeholder="Enter amount"
        />
        <label className={styles.label}>EVM Address</label>
        <input
          className={styles.input}
          value={evm_address}
          onChange={(ev) => setEvmAddr(ev.target.value)}
          placeholder="Enter EVM address"
        />
        <button className={styles.button} onClick={getInvoice}>Get Invoice!</button>
      </div>

      <div className={styles.step}>
        <h3>Claim RBTC</h3>
        {
          !coinbase ?
            <button className={styles.button} onClick={loadWeb3Modal}>Connect Wallet</button> :
            bridge && <button className={styles.button} onClick={claimRBTC}>Claim RBTC</button>
        }
      </div>

      <div>
        <span className={styles.message}>{message}</span>
      </div>
    </div>
  );

};

render(<RSKLightningBridge />, document.getElementById("app"));
